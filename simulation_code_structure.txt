



-Router:
	variables
		⁃	{DONE} veh_cap: {ogh: {dgh: {od: {dd: capacity}}}
		⁃	{DONE} veh_parcel_assignment: {(ogh, dgh, od): [parcels]}
		⁃	{DONE} rtd_demand: {ogh: {dgh: {dd: [parcels]}}}
		⁃	{DONE} en_route_demand: {ogh: {dgh: {od: {dd: [parcels]}}}
		⁃	{DONE} future_demand: {ogh: {dgh: {od: {dd: mean}}}
		⁃	{DONE} dispatch_vehicles: {ogh : {dgh: {od: input_id: [veh_cap]}}}
	functions
		init
			1.	scheule_planned_vehicles
		{DONE} add/remove to the dictionaries
		{DONE} demand_expected(orig, dest, orig_date, dest_date, amount)
			1.	add to future_demand
		{DONE} demand_realized(orig, dest, orig_date, dest_date, expected_amount, [parcels])
			1.	call parcel_created in record_statistics
			2.	set id
			3.	remove expected amount from future_demand
			4.	add the parcel to rtd_demand
			5.	if itinerary policy, call itinerary policy
		{DONE} schedule_vehicle(input_id, orig_gh, dest_gh, orig_date, dest_date, cap)
			1.	call notify_vehicle_scheduled in record_statistics
			2.	add to veh_cap
			3.	if the key already exists in the dispatch_vehicles dic, dispatch_already_scheduled = True
			4.	add to dispatch_vehicles 
			5.	if dispatch_already_scheduled: stop the function
			6.	delay with priority 4
			7.	create vehicle, set id, set the capacity as the sum of the capacity on dispatch_vehicles, set the dispatch_vehicles
			8.	call notify_vehicle_created in record statistics
			9.	call load request
		{DONE} assign_parcels_to_vehicle([parcels], veh_orig, veh_dest, veh_orig_date)
			1.	if vehicle not in veh_cap or cap not enough for parcels, raise error
			2.	add parcels to veh_parcel_assignment
			3.	remove capacity in veh_cap
		{DONE} vehicle_load_request(v)
			1.	for each parcel in veh_parcel_assignment
		remove from rtd_demand
			1.	if next dest not final dest, add to en_route_demand and add enroute key to parcel
			2.	remove parcels from veh_parcel_assignment
			3.	remove (veh_cap - veh_load) from veh_cap
			4.	if load more than veh cap, throw error
			4.	remove from dispatch_vehicles
			5.	send vehicle to dest
		{DONE} vehicle_unload_request
			1.	if final destination, call parcel_reached_final_destination in record statistics
			2.	if not final dest: remove parcel from en_route_demand and remove key of en_route demand from parcel
			3.	if not final dest: add parcel to rtd_demand
			4.	for each veh in dispatch_vehicles, call notify_vehicle_reached_final_destination in record_statitics
		{DONE} schedule_planned_vehicles
			1.	scheule all the vehicles in the vehicle input file





-Parcel:
	{DONE}  en_route_key: (ogh, dgh, od, dd) 





-Demand Generator
	{DONE} schedule demand: 
		1.	router.demand_expected 
		2.	delay
		3.	create parcel(s) and router.demand_realized





-Vehicle
	{DONE} variables
		id, input_id, orig_gh, dest_gh, orig_time, dest_time, orig_date, dest_date, capacity, loaded_parcels, load, dispatch_vehicles{input_id: [cap] }
	{DONE} load_parcel
		1.	add to load, loaded_parcels
	{DONE}  move_to_next_dest 
		1.	moving delay with priority 2
		2.	calls vehicle_arriving_for_unloading at dest



-Main
	{DONE} import the codes
	{DONE} initialize objects
	{DONE} covert to/from date and simulation time



-Inputs
	{DONE} variables
		⁃	travel_times
		⁃	vehicle_costs
		⁃	location_to_index
		⁃	index_to_location
		⁃	lowest_cost_vehicle_costs_matrix : 2x2 matrix of the lowest cost vehicles between locations
		⁃	travel_time_matrix 
	{DONE} input files
		⁃	demands
		⁃	vehicles
		⁃	travel_times
		⁃	vehicle_costs
		⁃	itineraries 
		⁃	hubs
	{DONE} input parameters
		⁃	simulation start date
		⁃	simulation end date
		⁃	time_discretization_factor -> factor used to discretize time
		⁃	policy_name (can be "itinerary", etc)
	{DONE}functions
		{DONE} get_minimum_cost_vehicle(orig_gh, dest_gh, needed_capacity)
			returns cost, total_cap
			if needed_capacity = 0, then cost and total_cap is zero
      

-RecordStatistics
	{DONE} variables
	⁃	total_cost
	⁃	created_vehicles_cost
	⁃	vehicle_costs_not_found 
	⁃	total_p_load_created
	⁃	total_v_created
	⁃	total_policy_v_created
	⁃	total_p_load_reached_destination
	⁃	total_load_travel_time
	⁃	total_capacity_travel_time
	⁃	[vehicle_utilizations]
	{DONE} notify_vehicle_scheduled
		1.	record the cost of the vehicle, if vehicle cost not found, increment vehicle_costs_not_found
	{DONE} notify_parcel_created
		1.	record the weight of created parcel
	{DONE} notify_vehicle_created -> vehicle might consist of multiple vehicles on the same dispatch
		⁃	add dispatch_vehicles to number of created vehicles 
		⁃	add to _created_vehicles_cost
	{DONE} notify_parcel_reached_final_destination
		1.	add to total_destroyed_parcel_weight
		2.	if date is past the due date, raise
	{DONE} notify_vehicle_reached_final_destination -> vehicle might consist of multiple vehicles on the same dispatch
		⁃	add to total_load_travel_time, total_capacity_travel_time, vehicle_utilizations
		⁃	if input_id < 0 -> add to number of policy vehicles
	{DONE} before_end_of_simulation
		⁃	printing/outputing statistics
	{DONE} notify_late_parcels_discarded({current_gh: des_gh: due_date: [parcels]}
		⁃	for eah od pair, add the cost of least costly truck to the total cost



        

-{DONE} Itinerary Policy



-Policy Connector
	{DONE} variables
		1.	tensor_position_to_rtd_parcels: {tensor_position : [parcels]}}
		2.	pre_decision_costs: [costs at beginnings of each period for t = 0, …, T]
		3.	pre_decision_states : [ [start_of_period_states for t = 0, …, T]
		4.	cost_of_actions: cost_of_actions [list of actions from t = 0, … , T-1]
		5.	post_decision_states = [pd_state for t = 0, …, T-1]
		6.	pre_decision_states_values = [value of pre decision states for t = 0, …, T]
		7.	post_decision_states_values = [value of post decision states for t = 0, …, T-1]
	{DONE} interval_algorithm -> runs at t = 0, …, T
		1.	if not itinerary, self.discard_late_parcels()
		2.	calculate_state_variables
		3.	record start_of_period_costs, start_of_period_state. if itinerary, start of period cost is the cost of created vehicles. if not, it's the total cost
		4.	if itinerary return, if period == T, calculate_value_of_states, return
		5.	call policy.get_action
		6.	record cost_of_action, pd_state 
		7.	execute actions
	{DONE} calculate_state_variables, d and v tensor , size: (#locations, 1 + ceil(end_t - start_t / discretization factor), #locations, 1 + ceil(end_t - start_t / discretization factor))
		1.	add future_demand to d
		2.	add en_route demand to d
		3.	add rtd_demand to d
		4.	add_rtd_demand parcels to tensor_position_to_rtd_parcels {tensor_position : [parcels]}}
		5.	create v tensor from veh capacity 
		6.	return d, v, tensor_position_to_rtd_parcels
	{DONE} discretize_demand_dates
		1.	orig date: round up, dest date: round down
	{DONE} discretize_vehicle_dates
		⁃	orig_date: round down, dest_date: round up
	{DONE} execute action (vehicles {(l1, l2): cap}, assignments {(l1, t1, l2, t2): next_location}
		1.	call router.schedule_vehicle for vehicles
		⁃	input id of created vehicle is -1
		2.	call router.assign_parcels_to_vehicle for assignments
		⁃	if assignment not in tensor_position_to_rtd_parcels, raise
	{DONE} discard_late_parcels()
		1.	go through rtd parcels, the ones that would be late now even with direct routing, remove them from rtd_parcels
		2.	record_statistics.notify_late_parcels_discarded
	{DONE} calculate_value_of_states
		1.	calculates the value of predicision and post decision states




-Policy 
	•	{DONE} attributes
	•	betas = ndarray(l1,t1,l2,t2) for t = 0, … ,T
	•	{DONE} get_action(d, v, current_period)
	•	return vehicles, assignments, cost of action, pd_state















